.step(data-title='Sending Reminders')
  h2 Sending Reminders

  blockquote.
    As an appointment system, I want to notify a user via SMS an arbitrary 
    interval before a future appointment.

  :markdown
    There are a lot of ways to build this part of our application, but no
    matter how you implement it there should be two moving parts:

    * A script that checks the database for any appointment that is upcoming,
    and then sends a SMS.
    * A worker that runs that script continuously.

    Let's take a look at how we decided to implement the latter
    with [Hangfire](http://hangfire.io/).

.step(data-title='Working with Hangfire',
  data-file='AppointmentReminders.Web/packages.config', data-mode="xml", 
  data-highlight='7-9')
  :markdown
    ## Working with Hangfire

    If you've never used a job scheduler before, 
    [you may want to check out this post by Scott Hanselman](http://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx)
     that shows a few ways to run background tasks in ASP.NET
    MVC. We decided to use Hangfire because of its simplicity. If you have a
    better way to schedule jobs in ASP.NET MVC please [let us know](mailto:
    devedoss@twilio.com).

    Hangfire needs a backend of some kind to queue the upcoming jobs. In this
    implmentation we're using [SQL Server
    Database](http://docs.hangfire.io/en/latest/configuration/using-sql-server.html),
    but it's possible to use a different data store. You can check their
    [documentation](http://docs.hangfire.io/en/latest/configuration/index.html)
    for further details.

    Let's take a look at how to configure Hangfire to use it in our appointment
    reminders application.

.step(data-title="Hangfire Configuration Class"
  data-file="AppointmentReminders.Web/App_Start/Hangfire.cs")
  :markdown
    ## Hangfire Configuration Class

    We created a class named `Hangfire` to configure our job scheduler. This class
    defines two static methods:

    1. `ConfigureHangfire` to set initialization parameters for the job scheduler.
    2. `InitialzeJobs` to specify which recurring jobs should be run, and how often they should run.

    Next, let's take a quick look at how we start up the job scheduler.

.step(data-title="Starting the Job Scheduler",
  data-file="AppointmentReminders.Web/Startup.cs",
  data-highlight="4-15")
  :markdown
    ## Starting the Job Scheduler

    This ASP.NET MVC project is an [OWIN-based application](http://www.asp.net/aspnet/overview/owin-and-katana/owin-startup-class-detection)
    , which allows us to create a startup class to run any custom initialization
    logic required in our application. This is the preferred location to start
    Hangfire - [check out their configuration docs for more information](http://docs.hangfire.io/en/latest/configuration/).

    Now that we've started the job scheduler, let's take a look at the logic
    that get's executed when our job runs.

.step(data-title="Notification Background Job",
  data-file="AppointmentReminders.Web/Workers/SendNotificationsJob.cs")
  :markdown
    ## Notification Background Job

    In this class, we define a method called `Execute` which is called every
    minute by Hangfire. Every time the job runs, we need to:

    1. Get a list of upcoming appointments that require notifications to be sent out
    2. Use Twilio to send appointment reminders via SMS

    The `AppontmentsFinder` class queries our SQL Server database to find all
    the appointments whose date and time are coming up soon. For each of those
    appointments, we'll use the Twilio REST API to send out a formatted message.

    Let's take a look at how we use Twilio to do that next.

.step(data-title="Twilio REST API Request",
  data-file="AppointmentReminders.Web/Domain/Twilio/RestClient.cs",
  data-language="csharp", data-highlight="6-23")
  :markdown
    ## Twilio REST API Request

    This class is responsible for reading our Twilio account credentials from
    `Web.config`, and using the Twilio REST API to actually send out a
    notification to our users.  We also need a [Twilio number](https://www.twilio.com/user/account/phone-numbers/incoming)
    to use as the sender for the text message. Actually sending the message is
    a single line of code!

    ## All Done

    And with a little code and a dash of configuration, we're ready to get automated
    appointment reminders firing in our application. Good work!

    As always, we'd love to hear your feedback on this tutorial. [Please reach out to
    us](mailto:help@twilio.com) with any questions you might have.  Thanks for
    checking out the tutorial!
