.step(data-title='Introduction')
  :markdown
    ## How It Works

    Ready to implement appointment reminders in your application? Here's how it works at a high level:

      1. An administrator creates an appointment for a future date and time, and
         stores a customer's phone number in the database for that appointment
      1. A background process checks the database on a regular interval, looking
         for appointments that require a reminder to be sent out
      1. At a configured time in advance of the appointment, an SMS reminder is
         sent out to the customer to remind them of their appointment

    ## Building Blocks

    Here are the technologies we'll use to get this done:

    * [ASP.NET MVC](http://www.asp.net/mvc) to create a database-driven web application
    * [The Messages Resource](/docs/api/rest/sending-sms) from Twilio's REST API to send text messages
    * [Hangfire](http://hangfire.io/) to help us schedule and execute background tasks on a recurring basis

    ## How To Read This Tutorial

    To implement appointment reminders, we will be working through a series of
    [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to
    fully implement appointment reminders in a web application. We'll walk
    through the code required to satisfy each story, and explore what we needed
    to add at each step.

    Let's get started! Click the right arrow to move on to the next step of the tutorial.

.step(data-title="About This Tutorial")
  :markdown
    ## About This Tutorial

    In this tutorial, we will be working through a series of [user
    stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully
    implement account verification in a web application. Our team implemented
    this example application in about 12 story points (roughly equivalent to 12
    working hours).

    Let's get started with our first user story around creating a new
    appointment.

.step(data-title='The User Story')
  h2 Creating an Appointment
  blockquote
    | As a user, I want to create an appointment with a name, guest phone
    | numbers, and a time in the future.
  :markdown
    In order to build an automated appointment reminder application, we
    probably should start with an appointment. This story requires that we
    create a bit of UI and a model object to create and save a new `Appointment`
    in our system. At a high level, here's what we will need to add:

    * A form to enter details about the appointment
    * A route and controller function on the server to render the form
    * A route and controller function on the server to handle the form POST
    request
    * A persistent `Appointment` model object to store information about the
    user

    Let's start by looking at the model, where we decide what information we
    want to store with the appointment.

.step(data-title='Appointment Model',
data-file='AppointmentReminders.Web/Models/Appointment.cs',
data-highlight="7-26")
  :markdown
    ## Appointment Model

    The appointment model is fairly straightforward, but since humans will be
    interacting with it let's make sure we add some data validation.

    *Data Validation*

    Validations are important, we don't want to have invalid data in our
    application. To do this job we're relying on [ASP.NET Data
    Annotations](http://www.asp.net/mvc/overview/older-versions/mvc-music-store/mvc-music-store-part-6).
    In our case, we only want to validate that some fields are required. To
    accomplish this we'll use `[Required]` data annotation.

    By default ASP.NET MVC displays the property name when rendering a control.
    (*In our example those property names can be `Name` or `PhoneNumber`*). As
    you can see, for rendering `Name` there shouldn't be any problem, but for
    `PhoneNumber` that's not the case, we might want to have something like
    **Phone Number**. For this kind of scenarios we can use another data
    annotation `[Display(Name = "NAME_TO_BE_DISPLAYED"]` where `Name` will
    contain the value to be displayed.

    Well, for validating the `PhoneNumber` we're using `[Phone]` data
    annotation.

    It is likely that our Appointment model would be created by an admin person
    at the site of the appointment. Well, it would be great if we could give our
    admin user some feedback when they create the appointment. In ASP.NET MVC we
    can take advantage of the built-in validation, if there are errors those
    will be displayed in the form.

.step(data-title="Running Migrations",
data-file="AppointmentReminders.Web/Migrations/201507011415152_InitialCreate.cs",
data-highlight="6-28")
  :markdown
    ## Running Migrations
    In this project we're using [code first
    migrations](http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)
    so in order to run this demo you have to execute `Update-Database`.

    ```
    PM > Update-Database
    ```

    Once migration is completed, the project will have a hidden file under *App
    Data* since we're using an embedded database.

    Now we're ready to move up to the view level of the application.

.step(data-title='New Appointment Form',
  data-file='AppointmentReminders.Web/Views/Appointments/_Form.cshtml',
  data-mode='html')
  :markdown
    ## New Appointment Form

    When we create a new appointment, we need a guest name, a phone number and a
    time. By using [HTML Helper
    classes](https://msdn.microsoft.com/en-us/library/system.web.mvc.htmlhelper.aspx)
    we can bind the form to the model object. Those helpers will generate the
    necessary html markup that will create a new Appointment on submit.

    Let's point out one specific helper class that ASP.NET MVC gives us for
    model-bound forms.

.step(data-title='HTML Helpers',
  data-file='AppointmentReminders.Web/Views/Appointments/_Form.cshtml',
  data-highlight='7-8',
  data-mode='html')
  :markdown
    ## HTML Helpers

    To render text boxes we're using the helper `TextBoxFor` and for render the
    necesary validation messages *if they are necessary* we'll use
    `ValidationMessageFor`.

    If you want to see the details of how to use HTML Extensions, please have a
    look in their
    [documentation](https://msdn.microsoft.com/en-us/library/system.web.mvc.htmlhelper.aspx).

    Now we have the basic building blocks to work interact with our
    appointments, let's have a look on that.
